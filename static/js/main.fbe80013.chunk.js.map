{"version":3,"sources":["getEthereum.js","getWeb3.js","contexts/AppContext.js","constants/Constants.js","components/WordleGridRow.jsx","components/WordleGrid.jsx","components/CryptleLogo.jsx","utils/Web3Utils.js","components/Header.jsx","components/Loading.jsx","components/Payout.jsx","components/Play.jsx","utils/WordleUtils.js","components/SignUp.jsx","components/Main.jsx","services/WordleContractInterface.js","components/Disconnected.jsx","App.js","serviceWorker.js","index.js"],"names":["getEthereum","a","document","readyState","Promise","resolve","setTimeout","window","ethereum","getWeb3","web3","Web3","provider","providers","HttpProvider","AppContext","createContext","guessResultCharacterClass","WordleGridRow","props","guess","result","classNames","id","i","push","className","WordleGrid","guesses","results","map","key","length","CryptleLogo","useState","colors","useEffect","console","log","accountsAvailable","accounts","undefined","getContractAddressFromChainId","chainId","Number","Header","context","useContext","chain","getChainFromChainId","getChainId","getActiveAccount","substr","Loading","Payout","wordleInterface","getWordleInterface","loading","setLoading","balance","setBalance","getAccountBalance","then","returnedBalance","Math","pow","onClick","withdrawOutstandingBalance","tx","alert","JSON","stringify","catch","e","Play","getPlayer","player","userGuessState","gettingGuessResult","guessing","setGuessing","setGuess","isGameComplete","guessCount","isSolved","solved","complete","setComplete","pollGuessResult","getPlayerState","setPlayer","location","reload","makeGuess","guessWord","toUpperCase","WordList","words","includes","test","isValidGuess","GettingResultState","disabled","MakingGuessState","amount","autoFocus","handleOutputString","guessString","inputProps","inputRegExp","SignUp","signingUp","setSigningUp","signUpCost","setSignUpCost","numPlayers","setNumPlayers","getSignUpCost","getNumPlayers","signUp","Main","enabled","gameState","currGameState","sleep","milliseconds","WordleContractInterface","wordleContract","account","methods","send","value","from","lotSizeInWei","call","getPlayerCount","utils","asciiToHex","resultAvailable","getGuessResultCall","getGuessResultSend","numberOfGuesses","guessState","userGuesses","hexToAscii","j","guessStore","resultElement","userObject","getGuessResult","tx1","getOutstandingBalance","receiveOutstandingBalance","this","Disconnected","initialAppState","chainid","App","state","setState","contextFunctions","getAccounts","getState","player1","enable","eth","parseInt","wordleArtifact","wordle","Contract","abi","playerState","func","Provider","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.fbe80013.chunk.js","sourcesContent":["export const getEthereum = async () => {\n\n    // event listener is not reliable\n    while (document.readyState !== \"complete\") {\n        await new Promise(resolve => setTimeout(resolve, 100))\n    }\n\n    return window.ethereum\n\n}\n","import Web3 from \"web3\";\nimport {getEthereum} from \"./getEthereum\";\n\nexport const getWeb3 = async () => {\n\n    const ethereum = await getEthereum()\n    let web3\n\n    if (ethereum) {\n        web3 = new Web3(ethereum)\n    } else if (window.web3) {\n        web3 = window.web3\n    } else {\n        const provider = new Web3.providers.HttpProvider(\n            \"http://127.0.0.1:8545\"\n        );\n        web3 = new Web3(provider)\n    }\n\n    return web3\n}","import { createContext } from 'react';\n\nconst AppContext = createContext();\nexport default AppContext;","export const guessResultCharacterClass = [\n    'gray-cell',\n    'yellow-cell',\n    'green-cell',\n    'white-cell'\n];","import React from \"react\";\nimport { guessResultCharacterClass } from \"../constants/Constants\";\n\nconst WordleGridRow = (props) => {\n    const { guess, result, id } = props;\n\n    let classNames = [];\n    for(let i=0; i<5; i++) {\n        classNames.push(guessResultCharacterClass[(result != null) ? result[i] : 3])\n    }\n\n    if (guess) {\n        return (\n            <tr>\n                <td className={classNames[0]}>\n                    {guess[0]}\n                </td>\n                <td className={classNames[1]}>\n                    {guess[1]}\n                </td>\n                <td className={classNames[2]}>\n                    {guess[2]}\n                </td>\n                <td className={classNames[3]}>\n                    {guess[3]}\n                </td>\n                <td className={classNames[4]}>\n                    {guess[4]}\n                </td>\n            </tr>\n        )\n    }\n\n    return (\n        <tr>\n            <td className=\"white-cell\"></td>\n            <td className=\"white-cell\"></td>\n            <td className=\"white-cell\"></td>\n            <td className=\"white-cell\"></td>\n            <td className=\"white-cell\"></td>\n        </tr>\n    )\n};\n\nexport default WordleGridRow;","import React from \"react\";\nimport WordleGridRow from \"./WordleGridRow\";\n\nconst WordleGrid = (props) => {\n    const { guesses, results } = props;\n\n    const keys = [0, 1, 2, 3, 4, 5];\n\n    return (\n        <table>\n            <tbody>\n                {\n                    keys.map((key) => {\n                        if (key < guesses.length) {\n                            return (\n                                <WordleGridRow\n                                    key={key}\n                                    id={key} \n                                    guess={guesses[key]}\n                                    result={results[key]}\n                                />\n                            )\n                        }\n                        return (\n                            <WordleGridRow \n                                key={key}\n                                id={key}\n                                guess={null}\n                                result={null}\n                            />\n                        )\n                    })\n                }\n            </tbody>\n        </table>\n    )\n};\n\nexport default WordleGrid;","import React, { useEffect, useState } from \"react\";\nimport { guessResultCharacterClass } from \"../constants/Constants\";\n\nfunction shuffle(array) {\n    console.log('Shuffling');\n    let currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle.\n    while (currentIndex != 0) {\n  \n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n    console.log(array);\n    return array;\n  }\n\nconst CryptleLogo = () => {\n\n    const [colors, setColors] = useState([0,1,0,0,0,2,2]);\n\n    useEffect(() => {\n        console.log('UseEffect');\n        // setInterval(() => {\n        //     console.log('Hello');\n        //     setColors(shuffle(colors));\n        // }, 1000);\n    }, [])\n\n    return (\n        <table id={'cryptle-logo-container'}>\n            <tbody>\n                <tr>\n                    <td className={guessResultCharacterClass[colors[0]]}>C</td>\n                    <td className={guessResultCharacterClass[colors[1]]}>R</td>\n                    <td className={guessResultCharacterClass[colors[2]]}>Y</td>\n                    <td className={guessResultCharacterClass[colors[3]]}>P</td>\n                    <td className={guessResultCharacterClass[colors[4]]}>T</td>\n                    <td className={guessResultCharacterClass[colors[5]]}>L</td>\n                    <td className={guessResultCharacterClass[colors[6]]}>E</td>\n                </tr>\n            </tbody>\n        </table>\n    )\n};\n\nexport default CryptleLogo;","import map from \"../artifacts/deployments/map.json\"\n\nexport const accountsAvailable = (accounts) => {\n    return accounts !== null && accounts !== undefined && accounts.length > 0;\n}\n\n\nexport const getChainFromChainId = (chainId) => {\n    switch (Number(chainId)) {\n        case 1:\n            return 'Ethereum';\n        case 4:\n            return 'Rinkeby';\n        case 137:\n            return 'Polygon';\n        case 8001:\n            return 'Polygon-Mumbai';\n        case 43114:\n            return 'Avalanche-C';\n        case 43113:\n            return 'Avalanche-Fuji';\n        default:\n            return 'Unknown';\n    }\n};\n\nexport const getContractAddressFromChainId = (chainId) => {\n    switch (Number(chainId)) {\n        case 43113:\n            return '0x0D2f237748C501725E6BE73b72135444d96BB162';\n        default:\n            return 'NOT LIVE';\n    }\n}\n","import React from \"react\";\nimport { useContext } from \"react\";\nimport AppContext from '../contexts/AppContext';\nimport { getChainFromChainId } from \"../utils/Web3Utils\";\n\nconst Header = () => {\n    const context = useContext(AppContext);\n    const chain = getChainFromChainId(context.getChainId());\n    return (\n        <header id={'header'}>\n             <span id={'chain-id'} className={chain}>{chain}</span>\n             <span id={'active-account'}>{context.getActiveAccount().substr(0,10)}</span> \n        </header>\n    );\n};\n\nexport default Header;","import React from \"react\";\n\nconst Loading = () => {\n    return (\n        <div id={'loading'}>Loading ...</div>\n    )\n};\n\nexport default Loading;","import React from \"react\";\nimport { useState, useEffect, useContext } from \"react\";\nimport CryptleLogo from './CryptleLogo';\nimport AppContext from '../contexts/AppContext';\nimport Header from \"./Header\";\nimport Loading from \"./Loading\";\n\nconst Payout = () => {\n    const context = useContext(AppContext);\n    const wordleInterface = context.getWordleInterface();\n\n    const [loading, setLoading] = useState(true);\n    const [balance, setBalance] = useState(-1);\n\n    useEffect( () => {\n        wordleInterface.getAccountBalance().then((returnedBalance) => {\n            setBalance(returnedBalance);\n            setLoading(false);\n        });\n    })\n\n    const getFunds = () => {\n        wordleInterface.withdrawOutstandingBalance().then((tx) => {\n            alert(JSON.stringify(tx));\n        }).catch( (e) => {\n            alert(\"error\");\n            console.log(e);\n        });\n    }\n\n    return (\n        (loading)?\n            <div>Loading ...</div>\n        :\n        <div id={'payout'}>\n            <div id={'balance-container'}>\n                Your balance \n                <br/>\n                <span id={'balance'}>{Number(balance)/Math.pow(10,18)}</span>\n            </div>\n            {\n                balance>0 && <button id={'withdraw'} onClick={getFunds}>Withdraw</button>\n            }\n        </div>\n    )\n};\n\nexport default Payout;","import React, { useContext, useEffect, useState } from 'react';\nimport WordleGrid from './WordleGrid';\nimport AppContext from '../contexts/AppContext';\nimport { isValidGuess } from '../utils/WordleUtils';\nimport Payout from \"./Payout\";\nimport RICIBs from 'react-individual-character-input-boxes';\n\nconst Play = () => {\n    const context = useContext(AppContext);\n    const wordleInterface = context.getWordleInterface();\n\n    const [player, setPlayer] = useState(context.getPlayer());\n\n    const [gettingGuessResult, setGettingGuessResult] = useState(player.userGuessState);\n    const [guessing, setGuessing] = useState(false);\n\n    const [guess, setGuess] = useState('');\n\n    const isGameComplete = async () => {\n        const guessCount = context.getPlayer().results.length;\n        const isSolved = context.getPlayer().solved;\n        return isSolved || (guessCount === 6 && context.getPlayer().userGuessState == 0);\n    };\n\n    const [loading, setLoading] = useState(1);\n    const [complete, setComplete] = useState(-1);\n\n    useEffect(() => {\n        isGameComplete().then((result) => {\n            setComplete(result);\n            setLoading(0);\n        })\n\n        if(!guessing && Number(gettingGuessResult)){\n            wordleInterface.pollGuessResult().then((result) => {\n                wordleInterface.getPlayerState().then((player) => {\n                    context.setPlayer(player);\n                    window.location.reload(false);\n                });\n            });\n        }\n\n    }, [player]);\n\n    const makeGuess = () => {\n        if (isValidGuess(guess)) {\n            setGuessing(true);\n            wordleInterface.makeGuess(guess).then((tx) => {\n                console.log(tx);\n                window.location.reload(false);\n            }).catch((e) => {\n                console.log('error');\n                console.log(e);\n                setGuessing(false);\n            });\n        } else {\n            alert('invalid guess');\n        }\n    };\n\n    const GettingResultState = () => {\n        return (\n            <div className='full-width'>\n                <button id={'make-guess'} disabled>Getting Result ...</button>\n            </div>\n        );\n    };\n\n    const MakingGuessState = () => {\n        return (\n            <div className='full-width'>\n                <button id={'make-guess'} disabled>Guessing ...</button>\n            </div>\n        );\n    };\n    \n    return (\n        (complete) ?\n        <div className='half-width'>\n            <WordleGrid guesses={player.guesses} results={player.results} />\n            <br/>\n            <Payout/>\n        </div> :\n        <div className='half-width'>\n            <div className='full-width'>\n                <WordleGrid guesses={player.guesses} results={player.results} />\n                <div className='separator'></div>\n            </div>\n            {\n            (guessing) ?\n                <MakingGuessState />:\n                (Number(player.userGuessState)) ?\n                <GettingResultState />:\n                <div>\n                    <RICIBs\n                    amount={5}\n                    autoFocus\n                    handleOutputString={(guessString) => {\n                        setGuess(guessString.toUpperCase());\n                    }}\n                    inputProps={[\n                        {className: 'guess-input'},\n                        {className: 'guess-input'},\n                        {className: 'guess-input'},\n                        {className: 'guess-input'},\n                        {className: 'guess-input'}\n                    ]}\n                    inputRegExp={/^[a-zA-Z]$/}\n                    />\n                    <br/>\n                    <button id={'make-guess'} onClick={() => makeGuess()}>Submit Guess</button>\n                </div>\n                \n            }\n        </div>\n        \n    )\n}\n\nexport default Play;","import WordList from '../wordlist/Wordlist.json';\n\nexport const isValidGuess = (guessWord) => {\n    let guess = guessWord.toUpperCase();\n    if (WordList.words.includes(guess) && (guess.length === 5) && (/^[a-zA-Z]+$/.test(guess))) {\n        return true;\n    }\n    return false;\n};","import React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport CryptleLogo from './CryptleLogo';\nimport AppContext from '../contexts/AppContext';\nimport Payout from \"./Payout\";\n\nconst SignUp = () => {\n    const context = useContext(AppContext);\n    const wordleInterface = context.getWordleInterface();\n    const [signingUp, setSigningUp] = useState(false);\n\n    const [signUpCost, setSignUpCost] = useState(0);\n    const [numPlayers, setNumPlayers] = useState(0);\n\n    useEffect(() => {\n      wordleInterface.getSignUpCost().then((tx) => {\n        setSignUpCost(tx);\n      });\n      wordleInterface.getNumPlayers().then((tx) => {\n        setNumPlayers(tx);\n      });\n    });\n\n    const signUp = () => {\n\n        setSigningUp(true);\n        wordleInterface.signUp(signUpCost).then((tx) => {\n            window.location.reload(false);\n        })\n        .catch((e) => {\n            alert('Error');\n            console.log(e);\n            setSigningUp(false);\n        });\n\n\n    };\n\n\n//     TODO: parameterize currency into a global variable which is fetched based on the chain\n    return (\n        <div className='half-width'>\n            <CryptleLogo />\n            <br/>\n            {\n                (signingUp) ?\n                <button id={'signup-button'} disabled>\n                    Signing Up..\n                </button>:\n                <div>\n                    <div>SIGN UP FEE: {signUpCost/(1e18)} AVAX</div>\n                    <button  id={'signup-button'} onClick={signUp}>\n                        PLAY\n                    </button>\n                    <div>{numPlayers} PLAYERS</div>\n                </div>\n            }\n            <div className={'separator'}></div>\n            <Payout/>\n        </div>\n    );\n};\n\nexport default SignUp;","import '../App.css';\nimport React, { useContext, useEffect, useState } from 'react';\nimport AppContext from '../contexts/AppContext';\nimport Play from './Play';\nimport SignUp from './SignUp';\nimport Payout from \"./Payout\";\nimport Header from './Header';\nimport CryptleLogo from './CryptleLogo';\n\nfunction Main() {\n  const context = useContext(AppContext);\n  const enabled = context.getPlayer().enabled;\n  const gameState = Number(context.getPlayer().currGameState);\n\n  return (\n    <div className=\"App\">\n      <div className='full-width'>\n        <Header/>\n        <br/>\n        {\n        (gameState)?\n            (enabled) ?\n                <Play /> :\n                <SignUp />\n            :\n            <div className='full-width'>\n                <CryptleLogo />\n                <Payout/>\n            </div>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Main;","const sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds));\n};\n\nexport class WordleContractInterface {\n    constructor (web3, wordleContract, account) {\n        this.web3 = web3;\n        this.wordleContract = wordleContract;\n        this.account = account;\n    }\n\n    signUp = async (signUpCost) => {\n        const tx = await this.wordleContract.methods.signUp().send({value: signUpCost, from: this.account});\n        console.log(tx);\n        return tx;\n    };\n\n    getSignUpCost = async () => {\n        const tx = await this.wordleContract.methods.lotSizeInWei().call({from: this.account});\n        return tx;\n    };\n\n    getNumPlayers = async () => {\n        const tx = await this.wordleContract.methods.getPlayerCount().call({from: this.account})\n        return tx;\n    }\n\n\n    makeGuess = async (guess) => {\n        const tx = await this.wordleContract.methods.makeGuess(this.web3.utils.asciiToHex(guess.toUpperCase())).send({from: this.account});\n        console.log('Make Guess Txn');\n        console.log(tx);\n        return tx;\n    };\n\n    pollGuessResult = async () => {\n        let resultAvailable = 0;\n        let result;\n\n        while(!resultAvailable) {\n            try {\n                const tx1 = await this.getGuessResultCall();\n                result = await this.getGuessResultSend().then(() => {\n                    resultAvailable = 1;\n                    window.location.reload(false);\n                });\n            } catch (e) {\n                await sleep(10000);\n                console.log(e);\n            }\n        }\n\n        return result;\n    }\n\n    getPlayerState = async () => {\n        const enabled = await this.wordleContract.methods.enabled(this.account).call();\n        const solved = await this.wordleContract.methods.solved(this.account).call();\n        const numberOfGuesses = await this.wordleContract.methods.numberOfGuesses(this.account).call();\n        const userGuessState = await this.wordleContract.methods.guessState(this.account).call();\n        const currGameState = await this.wordleContract.methods.currGameState().call();\n\n        let guesses = [];\n        let results = [];\n\n        for(let i=0;i<=numberOfGuesses;i++){\n            if(i!=Number(numberOfGuesses) || Number(userGuessState) === 1){\n                const guess = await this.wordleContract.methods.userGuesses(this.account, i).call();\n                guesses.push(this.web3.utils.hexToAscii(guess));\n            }\n        }\n\n        for(let i=0;i<numberOfGuesses;i++){\n            let result = [];\n            for(let j=0;j<5;j++){\n                const resultElement = await this.wordleContract.methods.guessStore(this.account, i, j).call();\n                result.push(resultElement);\n            }\n            results.push(result);\n        }\n\n        let userObject = {\n                enabled:enabled,\n                solved:solved,\n                numberOfGuesses: numberOfGuesses,\n                userGuessState: Number(userGuessState),\n                guesses:guesses,\n                results:results,\n                currGameState:currGameState\n        }\n\n        console.log(userObject);\n        return userObject;\n\n\n    }\n\n    getGuessResultCall = async () => {\n        const tx1 = await this.wordleContract.methods.getGuessResult().call({from: this.account});\n        console.log('Get Result Dry Run');\n        console.log(tx1);\n        return tx1;\n    };\n\n    getGuessResultSend = async () => {\n        const tx1 = await this.wordleContract.methods.getGuessResult().send({from: this.account});\n        console.log('Get Result Reak Run');\n        console.log(tx1);\n        return tx1;\n    };\n\n\n    isSolved = async () => {\n        const tx = await this.wordleContract.methods.solved(this.account).call({from: this.account});\n        return tx;\n    };\n\n    getAccountBalance = async () => {\n        const tx = await this.wordleContract.methods.getOutstandingBalance().call({from: this.account});\n        return tx;\n    };\n\n    withdrawOutstandingBalance = async () => {\n        const tx = await this.wordleContract.methods.receiveOutstandingBalance().send({from: this.account});\n        return tx;\n    };\n\n}\n\nexport default WordleContractInterface;","import React from \"react\";\n\nconst Disconnected = () => {\n    return (\n        <div>\n            Disconnected\n        </div>\n    )\n}\n\nexport default Disconnected;","import React, {useEffect, useState} from \"react\"\nimport './App.css'\nimport {getWeb3} from \"./getWeb3\"\nimport {getEthereum} from \"./getEthereum\"\nimport Main from \"./components/Main\"\nimport AppContext from \"./contexts/AppContext\"\nimport WordleContractInterface from \"./services/WordleContractInterface\"\nimport { accountsAvailable, getContractAddressFromChainId } from \"./utils/Web3Utils\"\nimport Loading from \"./components/Loading\"\nimport Disconnected from \"./components/Disconnected\";\nimport { isValidGuess } from \"./utils/WordleUtils\"\n\nconst initialAppState = {\n    web3: null,\n    accounts: null,\n    chainid: null,\n    wordleInterface: null,\n    player: null,\n    loading: true\n};\n\nconst App = () =>{\n\n    const [state, setState] = useState(initialAppState);\n\n    const contextFunctions = {\n        getAccounts: () => {\n            return state.accounts\n        },\n        getActiveAccount: () => {\n            return state.accounts[0]\n        },\n        getChainId: () => {\n            return state.chainid\n        },\n        getWordleInterface: () => {\n            return state.wordleInterface\n        },\n        getState: () => {\n            return state;\n        },\n        getPlayer: () => {\n            return state.player\n        },\n        setPlayer: (player1) => {\n            setState({\n                ...state, player: player1\n            })\n        }\n    };\n\n    useEffect(() => {\n        const func = async () => {\n            const web3 = await getWeb3();\n            try {\n                const ethereum = await getEthereum();\n                ethereum.enable();\n                const accounts = await web3.eth.getAccounts();\n                if (accountsAvailable(accounts)) {\n                    // Get the current chain id\n                    const chainid = parseInt(await web3.eth.getChainId());\n                    const wordleArtifact = await import(`./artifacts/contracts/WordleVRF.json`);\n                    const wordle = new web3.eth.Contract(wordleArtifact.abi, getContractAddressFromChainId(chainid));\n                    const wordleInterface = new WordleContractInterface(web3, wordle, accounts[0])\n                    const playerState = await wordleInterface.getPlayerState();\n\n                    console.log(playerState);\n\n                    setState({\n                        accounts: accounts,\n                        web3: web3,\n                        chainid: chainid,\n                        wordleInterface: wordleInterface,\n                        player: playerState,\n                        loading: false\n                    });\n                } else {\n                    setState({\n                        ...state,\n                        loading: false\n                    })\n                }\n            } catch (e) {\n                console.log(`Could not enable accounts. Interaction with contracts not available.\n                Use a modern browser with a Web3 plugin to fix this issue.`);\n                console.log(e);\n                setState({\n                    ...state,\n                    loading: false\n                })\n            }\n        }\n        func();\n    }, []);\n\n    return (\n        <AppContext.Provider value={contextFunctions}>\n            {\n                (state.loading) ?\n                <Loading /> :\n                (state.web3 && state.chainid) ?\n                <Main /> :\n                <Disconnected />\n            }\n        </AppContext.Provider>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}